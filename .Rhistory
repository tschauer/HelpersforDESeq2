par(mfrow=c(2,2))
col_order <- order(conditions)
bar_colors <- bar_colors[conditions][col_order]
barplot(colSums(read.counts)[col_order], main = "Total Reads", las=2, col = bar_colors)
levels(conditions)
bar_colors
par(fig=c(0,1,0,1), mar=c(0,0,0,0), oma=c(0,0,0,0), new=TRUE)
plot.new()
legend("bottom", legend = levels(conditions), horiz = T, bty = "n", cex = 0.75,
pch = 19, col =  unique(bar_colors))
colSums(read.counts)[col_order]
my_conditions
colSums(read.counts)
as.data.frame(colData(dds))
colSums(read.counts)/10^6
colSums(read.counts[-1:-4])/10^6
colSums(read.counts[-1:-4,])/10^6
library(HelpersforDESeq2)
my_conditions
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
my_conditions <- colData(dds)$Sample
my_conditions <- factor(my_conditions, levels = unique(my_conditions)[c(1,3,2,5,6,4)])
colData(dds)$Sample <- my_conditions
my_conditions
library(HelpersforDESeq2)
roxygenise();      # Builds the help files
library(HelpersforDESeq2)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(HelpersforDESeq2)
library(DESeq2)
data_dir <- system.file("extdata/", package = "HelpersforDESeq2")
load(file.path(data_dir, "read.counts.rda"))
kable(read.counts[1:10,1:6])
load(file.path(data_dir, "dds.rda"))
dds
my_conditions <- colData(dds)$Sample
my_conditions
my_conditions <- factor(my_conditions, levels = unique(my_conditions)[c(1,3,2,5,6,4)])
colData(dds)$Sample <- my_conditions
my_conditions
par(mfrow=c(2,2), mar = c(4,4,2,2), oma = c(2,1,1,1), mgp = c(2,1,0))
my_colors <- c("#8D9093", "#C199CE", "#DA0EA1", "#5026D9", "#90E7F8", "#1971A9")
plotReadStats(read.counts = read.counts,
conditions = my_conditions,
bar_colors = my_colors)
# Note multi-mappers are zero here, because they were excluded by the STAR aligner settings
plotReadStats(read.counts = read.counts,
conditions = my_conditions,
bar_colors = my_colors)
plotReadStats(read.counts = read.counts,
conditions = my_conditions,
bar_colors = my_colors)
plot(1:10. main="test")
plot(1:10, main="test")
library(HelpersforDESeq2)
library(HelpersforDESeq2)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
colData(dds.read)$Batch
par(mfrow=c(2,2), mar = c(4,4,2,2), oma = c(2,1,1,1), mgp = c(2,1,0))
library(sva)
log2_counts_uncor <- log2(counts(dds, normalized = TRUE)+1)
batchVar <- colData(dds)$Batch
modcombat <- model.matrix(~Sample, data = colData(dds))
log2_counts_bcor1 <- ComBat(dat = log2_counts_uncor, batch = batchVar, mod = modcombat, par.prior = TRUE, prior.plots = FALSE)
library(HelpersforDESeq2)
roxygenise();      # Builds the help files
library(HelpersforDESeq2)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(sva)
log2_counts_uncor <- log2(counts(dds, normalized = TRUE)+1)
batchVar <- colData(dds)$Batch
modcombat <- model.matrix(~Sample, data = colData(dds))
log2_counts_bcor <- ComBat(dat = log2_counts_uncor, batch = batchVar, mod = modcombat, par.prior = TRUE, prior.plots = FALSE)
par(mfrow=c(1,2), mar = c(4,4,2,2), oma = c(1,1,1,1), mgp = c(2,1,0))
my_limits <- c(-200,200)
plottingPCA(log2_counts_uncor,
xcomp = 1,
ycomp = 2,
conditions = my_conditions,
pca_colors = my_colors,
main_title = "PCA",
quantiles = c(0,1),
show_labels = TRUE,
point_size = 1.1,
my_xlimits = c(-100,100),
my_ylimits = c(-100,100))
roxygenise();      # Builds the help files
library(HelpersforDESeq2)
conditions
levels(conditions)
seq_along(levels(conditions))
legend_colors[seq_along(levels(conditions))
]
roxygenise();      # Builds the help files
library(HelpersforDESeq2)
library(HelpersforDESeq2)
library(HelpersforDESeq2)
library(HelpersforDESeq2)
levels(conditions)
levels(my_conditions)
levels(conditions)
nchar(levels(conditions))
library(HelpersforDESeq2)
nchar(levels(conditions))/sum(nchar(levels(conditions)))
library(HelpersforDESeq2)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
par(mfrow=c(1,2), mar = c(4,4,2,2), oma = c(1,1,1,1), mgp = c(2,1,0))
plottingPCA(log2_counts_uncor,
xcomp = 1,
ycomp = 2,
conditions = my_conditions,
pca_colors = my_colors,
main_title = "Before Batch Correction",
quantiles = c(0,1),
show_labels = FALSE,
point_size = 1.1,
my_xlimits = c(-100,100),
my_ylimits = c(-100,100))
plottingPCA(log2_counts_bcor,
xcomp = 1,
ycomp = 2,
conditions = my_conditions,
pca_colors = my_colors,
main_title = "After Batch Correction",
quantiles = c(0,1),
show_labels = FALSE,
point_size = 1.1,
my_xlimits = c(-100,100),
my_ylimits = c(-100,100))
plotLegend(conditions = my_conditions,
legend_colors = my_colors,
legend_size = 0.7)
my_conditions
par(mfrow=c(1,2), mar = c(4,4,2,2), oma = c(1,1,1,1), mgp = c(2,1,0))
plottingPCA(log2_counts_uncor,
xcomp = 1,
ycomp = 2,
conditions = my_conditions,
pca_colors = my_colors,
main_title = "Before Batch Correction",
quantiles = c(0,1),
show_labels = FALSE,
point_size = 1.1,
my_xlimits = c(-100,100),
my_ylimits = c(-100,100))
plottingPCA(log2_counts_bcor,
xcomp = 1,
ycomp = 2,
conditions = my_conditions,
pca_colors = my_colors,
main_title = "After Batch Correction",
quantiles = c(0,1),
show_labels = FALSE,
point_size = 1.1,
my_xlimits = c(-100,100),
my_ylimits = c(-100,100))
plotLegend(conditions = my_conditions,
legend_colors = my_colors,
legend_size = 0.7)
plotLegend <- function(conditions,
legend_colors,
legend_size = 0.8){
par(fig=c(0,1,0,1), mar=c(0,0,0,0), oma=c(0,0,0,0), new=TRUE)
plot.new()
legend("bottom", legend = levels(conditions),
#text.width = nchar(levels(conditions))/sum(nchar(levels(conditions))),
horiz = T, bty = "n", cex = legend_size, pt.cex = legend_size*1.2,
pch = 19, col =  legend_colors[seq_along(levels(conditions))])
}
par(mfrow=c(1,2), mar = c(4,4,2,2), oma = c(1,1,1,1), mgp = c(2,1,0))
plottingPCA(log2_counts_uncor,
xcomp = 1,
ycomp = 2,
conditions = my_conditions,
pca_colors = my_colors,
main_title = "Before Batch Correction",
quantiles = c(0,1),
show_labels = FALSE,
point_size = 1.1,
my_xlimits = c(-100,100),
my_ylimits = c(-100,100))
plottingPCA(log2_counts_bcor,
xcomp = 1,
ycomp = 2,
conditions = my_conditions,
pca_colors = my_colors,
main_title = "After Batch Correction",
quantiles = c(0,1),
show_labels = FALSE,
point_size = 1.1,
my_xlimits = c(-100,100),
my_ylimits = c(-100,100))
plotLegend(conditions = my_conditions,
legend_colors = my_colors,
legend_size = 0.7)
nchar(levels(conditions))/sum(nchar(levels(conditions)))
cumsum(nchar(levels(conditions)))
cums(nchar(levels(conditions))/sum(nchar(levels(conditions))))
cumsum(nchar(levels(conditions))/sum(nchar(levels(conditions))))
levels(conditions)
plotLegend <- function(conditions,
legend_colors,
legend_size = 0.8){
par(fig=c(0,1,0,1), mar=c(0,0,0,0), oma=c(0,0,0,0), new=TRUE)
plot.new()
legend("bottom",
legend = levels(conditions),
x.intersp=0, xjust=0, yjust=0,
text.width = cumsum(nchar(levels(conditions))/sum(nchar(levels(conditions)))),
horiz = T, bty = "n", cex = legend_size, pt.cex = legend_size*1.2,
pch = 19, col =  legend_colors[seq_along(levels(conditions))])
}
par(mfrow=c(1,2), mar = c(4,4,2,2), oma = c(1,1,1,1), mgp = c(2,1,0))
plottingPCA(log2_counts_uncor,
xcomp = 1,
ycomp = 2,
conditions = my_conditions,
pca_colors = my_colors,
main_title = "Before Batch Correction",
quantiles = c(0,1),
show_labels = FALSE,
point_size = 1.1,
my_xlimits = c(-100,100),
my_ylimits = c(-100,100))
plottingPCA(log2_counts_bcor,
xcomp = 1,
ycomp = 2,
conditions = my_conditions,
pca_colors = my_colors,
main_title = "After Batch Correction",
quantiles = c(0,1),
show_labels = FALSE,
point_size = 1.1,
my_xlimits = c(-100,100),
my_ylimits = c(-100,100))
plotLegend(conditions = my_conditions,
legend_colors = my_colors,
legend_size = 0.7)
plotLegend(conditions = my_conditions,
legend_colors = my_colors,
legend_size = 0.7)
plotLegend <- function(conditions,
legend_colors,
legend_size = 0.8){
par(fig=c(0,1,0,1), mar=c(0,0,0,0), oma=c(0,0,0,0), new=TRUE)
plot.new()
legend("bottom",
legend = levels(conditions),
#x.intersp=0, xjust=0, yjust=0,
text.width = cumsum(nchar(levels(conditions))/sum(nchar(levels(conditions)))),
horiz = T, bty = "n", cex = legend_size, pt.cex = legend_size*1.2,
pch = 19, col =  legend_colors[seq_along(levels(conditions))])
}
par(mfrow=c(1,2), mar = c(4,4,2,2), oma = c(1,1,1,1), mgp = c(2,1,0))
plottingPCA(log2_counts_uncor,
xcomp = 1,
ycomp = 2,
conditions = my_conditions,
pca_colors = my_colors,
main_title = "Before Batch Correction",
quantiles = c(0,1),
show_labels = FALSE,
point_size = 1.1,
my_xlimits = c(-100,100),
my_ylimits = c(-100,100))
plottingPCA(log2_counts_bcor,
xcomp = 1,
ycomp = 2,
conditions = my_conditions,
pca_colors = my_colors,
main_title = "After Batch Correction",
quantiles = c(0,1),
show_labels = FALSE,
point_size = 1.1,
my_xlimits = c(-100,100),
my_ylimits = c(-100,100))
plotLegend(conditions = my_conditions,
legend_colors = my_colors,
legend_size = 0.7)
my_conditions
par(mfrow=c(1,2), mar = c(4,4,2,2), oma = c(1,1,1,1), mgp = c(2,1,0))
plottingPCA(log2_counts_uncor,
xcomp = 1,
ycomp = 2,
conditions = my_conditions,
pca_colors = my_colors,
main_title = "Before Batch Correction",
quantiles = c(0,1),
show_labels = FALSE,
point_size = 1.1,
my_xlimits = c(-100,100),
my_ylimits = c(-100,100))
plottingPCA(log2_counts_bcor,
xcomp = 1,
ycomp = 2,
conditions = my_conditions,
pca_colors = my_colors,
main_title = "After Batch Correction",
quantiles = c(0,1),
show_labels = FALSE,
point_size = 1.1,
my_xlimits = c(-100,100),
my_ylimits = c(-100,100))
plotLegend(conditions = my_conditions,
legend_colors = my_colors,
legend_size = 0.7)
plotLegend <- function(conditions,
legend_colors,
legend_size = 0.8){
par(fig=c(0,1,0,1), mar=c(0,0,0,0), oma=c(0,0,0,0), new=TRUE)
plot.new()
legend("bottom",
legend = levels(conditions),
#x.intersp=0, xjust=0, yjust=0,
#text.width = cumsum(nchar(levels(conditions))/sum(nchar(levels(conditions)))),
horiz = T, bty = "n", cex = legend_size, pt.cex = legend_size*1.2,
pch = 19, col =  legend_colors[seq_along(levels(conditions))])
}
par(mfrow=c(1,2), mar = c(4,4,2,2), oma = c(1,1,1,1), mgp = c(2,1,0))
plottingPCA(log2_counts_uncor,
xcomp = 1,
ycomp = 2,
conditions = my_conditions,
pca_colors = my_colors,
main_title = "Before Batch Correction",
quantiles = c(0,1),
show_labels = FALSE,
point_size = 1.1,
my_xlimits = c(-100,100),
my_ylimits = c(-100,100))
plottingPCA(log2_counts_bcor,
xcomp = 1,
ycomp = 2,
conditions = my_conditions,
pca_colors = my_colors,
main_title = "After Batch Correction",
quantiles = c(0,1),
show_labels = FALSE,
point_size = 1.1,
my_xlimits = c(-100,100),
my_ylimits = c(-100,100))
plotLegend(conditions = my_conditions,
legend_colors = my_colors,
legend_size = 0.7)
library(HelpersforDESeq2)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
par(mfrow=c(1,2), mar = c(4,4,2,2), oma = c(1,1,1,1), mgp = c(2,1,0))
plottingPCA(log2_counts_uncor,
xcomp = 1,
ycomp = 2,
conditions = my_conditions,
pca_colors = my_colors,
main_title = "Before Batch Correction",
quantiles = c(0,1),
show_labels = FALSE,
point_size = 1.1,
my_xlimits = c(-100,100),
my_ylimits = c(-100,100))
plottingPCA(log2_counts_bcor,
xcomp = 1,
ycomp = 2,
conditions = my_conditions,
pca_colors = my_colors,
main_title = "After Batch Correction",
quantiles = c(0,1),
show_labels = FALSE,
point_size = 1.1,
my_xlimits = c(-100,100),
my_ylimits = c(-100,100))
plotLegend(conditions = my_conditions,
legend_colors = my_colors,
legend_size = 0.7)
rm(list = "plotLegend")
par(mfrow=c(1,2), mar = c(4,4,2,2), oma = c(1,1,1,1), mgp = c(2,1,0))
plottingPCA(log2_counts_uncor,
xcomp = 1,
ycomp = 2,
conditions = my_conditions,
pca_colors = my_colors,
main_title = "Before Batch Correction",
quantiles = c(0,1),
show_labels = FALSE,
point_size = 1.1,
my_xlimits = c(-100,100),
my_ylimits = c(-100,100))
plottingPCA(log2_counts_bcor,
xcomp = 1,
ycomp = 2,
conditions = my_conditions,
pca_colors = my_colors,
main_title = "After Batch Correction",
quantiles = c(0,1),
show_labels = FALSE,
point_size = 1.1,
my_xlimits = c(-100,100),
my_ylimits = c(-100,100))
plotLegend(conditions = my_conditions,
legend_colors = my_colors,
legend_size = 0.7)
library(HelpersforDESeq2)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
par(mfrow=c(1,2), mar = c(4,4,2,2), oma = c(1,1,1,1), mgp = c(2,1,0))
plottingPCA(log2_counts_uncor,
xcomp = 1,
ycomp = 2,
conditions = my_conditions,
pca_colors = my_colors,
main_title = "Before Batch Correction",
quantiles = c(0,1),
show_labels = FALSE,
point_size = 1.1,
my_xlimits = c(-100,100),
my_ylimits = c(-100,100))
plottingPCA(log2_counts_bcor,
xcomp = 1,
ycomp = 2,
conditions = my_conditions,
pca_colors = my_colors,
main_title = "After Batch Correction",
quantiles = c(0,1),
show_labels = FALSE,
point_size = 1.1,
my_xlimits = c(-100,100),
my_ylimits = c(-100,100))
plotLegend(conditions = my_conditions,
legend_colors = my_colors,
legend_size = 0.7)
library(HelpersforDESeq2)
library(HelpersforDESeq2)
library(roxygen2); # Read in the roxygen2 R package
roxygenise();      # Builds the help files
library(HelpersforDESeq2)
plottingPCA(log2_counts_bcor,
xcomp = 1,
ycomp = 2,
conditions = my_conditions,
pca_colors = my_colors,
main_title = "After Batch Correction",
quantiles = c(0,1),
show_labels = FALSE,
point_size = 1.1,
my_xlimits = c(-100,100),
my_ylimits = c(-100,100))
plottingPCA(log2_counts_bcor,
xcomp = 1,
ycomp = 2,
conditions = my_conditions,
pca_colors = my_colors,
main_title = "After Batch Correction",
quantiles = c(0,1),
show_labels = TRUE,
point_size = 1.1,
my_xlimits = c(-100,100),
my_ylimits = c(-100,100))
library(HelpersforDESeq2)
library(HelpersforDESeq2)
library(roxygen2)
roxygenise()
library(HelpersforDESeq2)
library(roxygen2)
roxygenise()
library(HelpersforDESeq2)
roxygenise()
library(HelpersforDESeq2)
roxygenise()
library(HelpersforDESeq2)
roxygenise()
roxygenise()
library(HelpersforDESeq2)
library(roxygen2)
roxygenise()
library(HelpersforDESeq2)
library(HelpersforDESeq2)
roxygenise()
library(HelpersforDESeq2)
library(roxygen2)
roxygenise()
library(HelpersforDESeq2)
library(roxygen2)
roxygenise()
library(HelpersforDESeq2)
roxygenise()
roxygenise()
library(HelpersforDESeq2)
roxygenise()
library(HelpersforDESeq2)
roxygenise()
library(HelpersforDESeq2)
roxygenise()
library(HelpersforDESeq2)
library(roxygen2)
1:10 %in% 1:2
1:10 %in% 11
roxygenise()
library(HelpersforDESeq2)
roxygenise()
library(HelpersforDESeq2)
selection_vector <- FALSE
sum(selection_vector)
library(roxygen2)
roxygenise()
library(HelpersforDESeq2)
library(roxygen2)
roxygenise()
library(HelpersforDESeq2)
