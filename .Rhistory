par(mfrow=c(1,2), mar = c(4,4,2,2), oma = c(1,1,1,1), mgp = c(2,1,0))
plottingPCA(log2_counts_uncor,
xcomp = 1,
ycomp = 2,
conditions = my_conditions,
pca_colors = my_colors,
main_title = "Before Batch Correction",
quantiles = c(0,1),
show_labels = FALSE,
point_size = 1.1,
my_xlimits = c(-100,100),
my_ylimits = c(-100,100))
plottingPCA(log2_counts_bcor,
xcomp = 1,
ycomp = 2,
conditions = my_conditions,
pca_colors = my_colors,
main_title = "After Batch Correction",
quantiles = c(0,1),
show_labels = FALSE,
point_size = 1.1,
my_xlimits = c(-100,100),
my_ylimits = c(-100,100))
plotLegend(conditions = my_conditions,
legend_colors = my_colors,
legend_size = 0.7)
plotLegend <- function(conditions,
legend_colors,
legend_size = 0.8){
par(fig=c(0,1,0,1), mar=c(0,0,0,0), oma=c(0,0,0,0), new=TRUE)
plot.new()
legend("bottom", legend = levels(conditions),
#text.width = nchar(levels(conditions))/sum(nchar(levels(conditions))),
horiz = T, bty = "n", cex = legend_size, pt.cex = legend_size*1.2,
pch = 19, col =  legend_colors[seq_along(levels(conditions))])
}
par(mfrow=c(1,2), mar = c(4,4,2,2), oma = c(1,1,1,1), mgp = c(2,1,0))
plottingPCA(log2_counts_uncor,
xcomp = 1,
ycomp = 2,
conditions = my_conditions,
pca_colors = my_colors,
main_title = "Before Batch Correction",
quantiles = c(0,1),
show_labels = FALSE,
point_size = 1.1,
my_xlimits = c(-100,100),
my_ylimits = c(-100,100))
plottingPCA(log2_counts_bcor,
xcomp = 1,
ycomp = 2,
conditions = my_conditions,
pca_colors = my_colors,
main_title = "After Batch Correction",
quantiles = c(0,1),
show_labels = FALSE,
point_size = 1.1,
my_xlimits = c(-100,100),
my_ylimits = c(-100,100))
plotLegend(conditions = my_conditions,
legend_colors = my_colors,
legend_size = 0.7)
nchar(levels(conditions))/sum(nchar(levels(conditions)))
cumsum(nchar(levels(conditions)))
cums(nchar(levels(conditions))/sum(nchar(levels(conditions))))
cumsum(nchar(levels(conditions))/sum(nchar(levels(conditions))))
levels(conditions)
plotLegend <- function(conditions,
legend_colors,
legend_size = 0.8){
par(fig=c(0,1,0,1), mar=c(0,0,0,0), oma=c(0,0,0,0), new=TRUE)
plot.new()
legend("bottom",
legend = levels(conditions),
x.intersp=0, xjust=0, yjust=0,
text.width = cumsum(nchar(levels(conditions))/sum(nchar(levels(conditions)))),
horiz = T, bty = "n", cex = legend_size, pt.cex = legend_size*1.2,
pch = 19, col =  legend_colors[seq_along(levels(conditions))])
}
par(mfrow=c(1,2), mar = c(4,4,2,2), oma = c(1,1,1,1), mgp = c(2,1,0))
plottingPCA(log2_counts_uncor,
xcomp = 1,
ycomp = 2,
conditions = my_conditions,
pca_colors = my_colors,
main_title = "Before Batch Correction",
quantiles = c(0,1),
show_labels = FALSE,
point_size = 1.1,
my_xlimits = c(-100,100),
my_ylimits = c(-100,100))
plottingPCA(log2_counts_bcor,
xcomp = 1,
ycomp = 2,
conditions = my_conditions,
pca_colors = my_colors,
main_title = "After Batch Correction",
quantiles = c(0,1),
show_labels = FALSE,
point_size = 1.1,
my_xlimits = c(-100,100),
my_ylimits = c(-100,100))
plotLegend(conditions = my_conditions,
legend_colors = my_colors,
legend_size = 0.7)
plotLegend(conditions = my_conditions,
legend_colors = my_colors,
legend_size = 0.7)
plotLegend <- function(conditions,
legend_colors,
legend_size = 0.8){
par(fig=c(0,1,0,1), mar=c(0,0,0,0), oma=c(0,0,0,0), new=TRUE)
plot.new()
legend("bottom",
legend = levels(conditions),
#x.intersp=0, xjust=0, yjust=0,
text.width = cumsum(nchar(levels(conditions))/sum(nchar(levels(conditions)))),
horiz = T, bty = "n", cex = legend_size, pt.cex = legend_size*1.2,
pch = 19, col =  legend_colors[seq_along(levels(conditions))])
}
par(mfrow=c(1,2), mar = c(4,4,2,2), oma = c(1,1,1,1), mgp = c(2,1,0))
plottingPCA(log2_counts_uncor,
xcomp = 1,
ycomp = 2,
conditions = my_conditions,
pca_colors = my_colors,
main_title = "Before Batch Correction",
quantiles = c(0,1),
show_labels = FALSE,
point_size = 1.1,
my_xlimits = c(-100,100),
my_ylimits = c(-100,100))
plottingPCA(log2_counts_bcor,
xcomp = 1,
ycomp = 2,
conditions = my_conditions,
pca_colors = my_colors,
main_title = "After Batch Correction",
quantiles = c(0,1),
show_labels = FALSE,
point_size = 1.1,
my_xlimits = c(-100,100),
my_ylimits = c(-100,100))
plotLegend(conditions = my_conditions,
legend_colors = my_colors,
legend_size = 0.7)
my_conditions
par(mfrow=c(1,2), mar = c(4,4,2,2), oma = c(1,1,1,1), mgp = c(2,1,0))
plottingPCA(log2_counts_uncor,
xcomp = 1,
ycomp = 2,
conditions = my_conditions,
pca_colors = my_colors,
main_title = "Before Batch Correction",
quantiles = c(0,1),
show_labels = FALSE,
point_size = 1.1,
my_xlimits = c(-100,100),
my_ylimits = c(-100,100))
plottingPCA(log2_counts_bcor,
xcomp = 1,
ycomp = 2,
conditions = my_conditions,
pca_colors = my_colors,
main_title = "After Batch Correction",
quantiles = c(0,1),
show_labels = FALSE,
point_size = 1.1,
my_xlimits = c(-100,100),
my_ylimits = c(-100,100))
plotLegend(conditions = my_conditions,
legend_colors = my_colors,
legend_size = 0.7)
plotLegend <- function(conditions,
legend_colors,
legend_size = 0.8){
par(fig=c(0,1,0,1), mar=c(0,0,0,0), oma=c(0,0,0,0), new=TRUE)
plot.new()
legend("bottom",
legend = levels(conditions),
#x.intersp=0, xjust=0, yjust=0,
#text.width = cumsum(nchar(levels(conditions))/sum(nchar(levels(conditions)))),
horiz = T, bty = "n", cex = legend_size, pt.cex = legend_size*1.2,
pch = 19, col =  legend_colors[seq_along(levels(conditions))])
}
par(mfrow=c(1,2), mar = c(4,4,2,2), oma = c(1,1,1,1), mgp = c(2,1,0))
plottingPCA(log2_counts_uncor,
xcomp = 1,
ycomp = 2,
conditions = my_conditions,
pca_colors = my_colors,
main_title = "Before Batch Correction",
quantiles = c(0,1),
show_labels = FALSE,
point_size = 1.1,
my_xlimits = c(-100,100),
my_ylimits = c(-100,100))
plottingPCA(log2_counts_bcor,
xcomp = 1,
ycomp = 2,
conditions = my_conditions,
pca_colors = my_colors,
main_title = "After Batch Correction",
quantiles = c(0,1),
show_labels = FALSE,
point_size = 1.1,
my_xlimits = c(-100,100),
my_ylimits = c(-100,100))
plotLegend(conditions = my_conditions,
legend_colors = my_colors,
legend_size = 0.7)
library(HelpersforDESeq2)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
par(mfrow=c(1,2), mar = c(4,4,2,2), oma = c(1,1,1,1), mgp = c(2,1,0))
plottingPCA(log2_counts_uncor,
xcomp = 1,
ycomp = 2,
conditions = my_conditions,
pca_colors = my_colors,
main_title = "Before Batch Correction",
quantiles = c(0,1),
show_labels = FALSE,
point_size = 1.1,
my_xlimits = c(-100,100),
my_ylimits = c(-100,100))
plottingPCA(log2_counts_bcor,
xcomp = 1,
ycomp = 2,
conditions = my_conditions,
pca_colors = my_colors,
main_title = "After Batch Correction",
quantiles = c(0,1),
show_labels = FALSE,
point_size = 1.1,
my_xlimits = c(-100,100),
my_ylimits = c(-100,100))
plotLegend(conditions = my_conditions,
legend_colors = my_colors,
legend_size = 0.7)
rm(list = "plotLegend")
par(mfrow=c(1,2), mar = c(4,4,2,2), oma = c(1,1,1,1), mgp = c(2,1,0))
plottingPCA(log2_counts_uncor,
xcomp = 1,
ycomp = 2,
conditions = my_conditions,
pca_colors = my_colors,
main_title = "Before Batch Correction",
quantiles = c(0,1),
show_labels = FALSE,
point_size = 1.1,
my_xlimits = c(-100,100),
my_ylimits = c(-100,100))
plottingPCA(log2_counts_bcor,
xcomp = 1,
ycomp = 2,
conditions = my_conditions,
pca_colors = my_colors,
main_title = "After Batch Correction",
quantiles = c(0,1),
show_labels = FALSE,
point_size = 1.1,
my_xlimits = c(-100,100),
my_ylimits = c(-100,100))
plotLegend(conditions = my_conditions,
legend_colors = my_colors,
legend_size = 0.7)
library(HelpersforDESeq2)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
par(mfrow=c(1,2), mar = c(4,4,2,2), oma = c(1,1,1,1), mgp = c(2,1,0))
plottingPCA(log2_counts_uncor,
xcomp = 1,
ycomp = 2,
conditions = my_conditions,
pca_colors = my_colors,
main_title = "Before Batch Correction",
quantiles = c(0,1),
show_labels = FALSE,
point_size = 1.1,
my_xlimits = c(-100,100),
my_ylimits = c(-100,100))
plottingPCA(log2_counts_bcor,
xcomp = 1,
ycomp = 2,
conditions = my_conditions,
pca_colors = my_colors,
main_title = "After Batch Correction",
quantiles = c(0,1),
show_labels = FALSE,
point_size = 1.1,
my_xlimits = c(-100,100),
my_ylimits = c(-100,100))
plotLegend(conditions = my_conditions,
legend_colors = my_colors,
legend_size = 0.7)
library(HelpersforDESeq2)
library(HelpersforDESeq2)
library(roxygen2); # Read in the roxygen2 R package
roxygenise();      # Builds the help files
library(HelpersforDESeq2)
plottingPCA(log2_counts_bcor,
xcomp = 1,
ycomp = 2,
conditions = my_conditions,
pca_colors = my_colors,
main_title = "After Batch Correction",
quantiles = c(0,1),
show_labels = FALSE,
point_size = 1.1,
my_xlimits = c(-100,100),
my_ylimits = c(-100,100))
plottingPCA(log2_counts_bcor,
xcomp = 1,
ycomp = 2,
conditions = my_conditions,
pca_colors = my_colors,
main_title = "After Batch Correction",
quantiles = c(0,1),
show_labels = TRUE,
point_size = 1.1,
my_xlimits = c(-100,100),
my_ylimits = c(-100,100))
library(HelpersforDESeq2)
library(HelpersforDESeq2)
library(roxygen2)
roxygenise()
library(HelpersforDESeq2)
library(roxygen2)
roxygenise()
library(HelpersforDESeq2)
roxygenise()
library(HelpersforDESeq2)
roxygenise()
library(HelpersforDESeq2)
roxygenise()
roxygenise()
library(HelpersforDESeq2)
library(roxygen2)
roxygenise()
library(HelpersforDESeq2)
library(HelpersforDESeq2)
roxygenise()
library(HelpersforDESeq2)
library(roxygen2)
roxygenise()
library(HelpersforDESeq2)
library(roxygen2)
roxygenise()
library(HelpersforDESeq2)
roxygenise()
roxygenise()
library(HelpersforDESeq2)
roxygenise()
library(HelpersforDESeq2)
roxygenise()
library(HelpersforDESeq2)
roxygenise()
library(HelpersforDESeq2)
library(roxygen2)
1:10 %in% 1:2
1:10 %in% 11
roxygenise()
library(HelpersforDESeq2)
roxygenise()
library(HelpersforDESeq2)
selection_vector <- FALSE
sum(selection_vector)
library(roxygen2)
roxygenise()
library(HelpersforDESeq2)
library(roxygen2)
roxygenise()
library(HelpersforDESeq2)
library(roxygen2)
roxygenise()
library(HelpersforDESeq2)
library(roxygen2)
roxygenise()
library(HelpersforDESeq2)
?prcomp
library(mvtnorm)
my_data <-  rmvnorm(1000, mean = c(0,2,10))
heaD(my_data)
head(my_data)
colMeans(my_data)
my_data <-  rmvnorm(1000, mean = c(0,0,2,2,10,10))
rv <- rowVars(my_data, na.rm = TRUE)
library(matrixStats)
quantiles <- c(0,1)
rv <- rowVars(my_data, na.rm = TRUE)
selection <- (rv >  quantile(rv, quantiles[1], na.rm = TRUE)  & rv < quantile(rv, quantiles[2], na.rm = TRUE))
pca <- prcomp(t(my_data[selection, ]), scale. = TRUE, na.action = na.omit)
pca <- prcomp(t(my_data[selection, ]), scale. = TRUE)
xcomp = 1
ycomp = 2
pca_colors = c("#999999", "#0072B2", "#CC79A7", "#009E73", "#E69F00", "#D55E00", "#56B4E9", "#F0E442")
main_title = "PCA"
conditions <- factor(c("A","A","B","B","C","C"))
my_xlimits = c(-100,100)
point_size = 1.1
my_ylimits = c(-100,100)
plot(pca$x[, xcomp], pca$x[, ycomp]*-1,
col = pca_colors[conditions],
pch=16, cex = point_size,
xlab = paste("PC",xcomp," (", percentVar[xcomp], "%)", sep=""),
ylab = paste("PC",ycomp," (", percentVar[ycomp], "%)", sep=""),
xlim= my_xlimits, ylim=my_ylimits)
percentVar <- round(pca$sdev^2/sum(pca$sdev^2)*100,1)[1:10]
plot(pca$x[, xcomp], pca$x[, ycomp]*-1,
col = pca_colors[conditions],
pch=16, cex = point_size,
xlab = paste("PC",xcomp," (", percentVar[xcomp], "%)", sep=""),
ylab = paste("PC",ycomp," (", percentVar[ycomp], "%)", sep=""),
xlim= my_xlimits, ylim=my_ylimits)
my_ylimits = c(-10,10)
plot(pca$x[, xcomp], pca$x[, ycomp]*-1,
col = pca_colors[conditions],
pch=16, cex = point_size,
xlab = paste("PC",xcomp," (", percentVar[xcomp], "%)", sep=""),
ylab = paste("PC",ycomp," (", percentVar[ycomp], "%)", sep=""),
xlim= my_xlimits, ylim=my_ylimits)
pca <- prcomp(na.omit(t(my_data[selection, ])), scale. = TRUE)
percentVar <- round(pca$sdev^2/sum(pca$sdev^2)*100,1)[1:10]
plot(pca$x[, xcomp], pca$x[, ycomp]*-1,
col = pca_colors[conditions],
pch=16, cex = point_size,
xlab = paste("PC",xcomp," (", percentVar[xcomp], "%)", sep=""),
ylab = paste("PC",ycomp," (", percentVar[ycomp], "%)", sep=""),
xlim= my_xlimits, ylim=my_ylimits)
plot(pca$x[, xcomp], pca$x[, ycomp]*-1,
col = pca_colors[-1][conditions],
pch=16, cex = point_size,
xlab = paste("PC",xcomp," (", percentVar[xcomp], "%)", sep=""),
ylab = paste("PC",ycomp," (", percentVar[ycomp], "%)", sep=""),
xlim= my_xlimits, ylim=my_ylimits)
my_data[sample(1:10, 10)] <- NA
head(my_data)
head(my_data,20)
sample(1:10, 10)
my_data[sample(1:10, 10),sample(1:10, 10)] <- NA
my_data[sample(1:10, 10),sample(1:6, 10)] <- NA
head(my_data)
my_data[sample(1:10, 10),sample(1:6, 10, replace = T)] <- NA
head(my_data)
head(my_data,20)
sample(1:6, 10, replace = T)
rv <- rowVars(my_data, na.rm = TRUE)
selection <- (rv >  quantile(rv, quantiles[1], na.rm = TRUE)  & rv < quantile(rv, quantiles[2], na.rm = TRUE))
pca <- prcomp(na.omit(t(my_data[selection, ])), scale. = TRUE)
head(selection)
head(t(my_data[selection, ])
)
na.omit(t(my_data[selection, ]))
pca <- prcomp(na.omit(t(my_data[selection, ])), scale. = TRUE)
my_data <-  rmvnorm(1000, mean = c(0,2,10))
rv <- rowVars(my_data, na.rm = TRUE)
selection <- (rv >  quantile(rv, quantiles[1], na.rm = TRUE)  & rv < quantile(rv, quantiles[2], na.rm = TRUE))
pca <- prcomp(na.omit(t(my_data[selection, ])), scale. = TRUE)
percentVar <- round(pca$sdev^2/sum(pca$sdev^2)*100,1)[1:10]
plot(pca$x[, xcomp], pca$x[, ycomp]*-1,
col = pca_colors[conditions],
pch=16, cex = point_size,
xlab = paste("PC",xcomp," (", percentVar[xcomp], "%)", sep=""),
ylab = paste("PC",ycomp," (", percentVar[ycomp], "%)", sep=""),
xlim= my_xlimits, ylim=my_ylimits)
plot(pca$x[, xcomp], pca$x[, ycomp]*-1,
col = pca_colors[conditions],
pch=16, cex = point_size,
xlab = paste("PC",xcomp," (", percentVar[xcomp], "%)", sep=""),
ylab = paste("PC",ycomp," (", percentVar[ycomp], "%)", sep=""))
head(my_data)
my_data <-  rmvnorm(1000, mean = c(0,0,2,2,10,10))
rv <- rowVars(my_data, na.rm = TRUE)
selection <- (rv >  quantile(rv, quantiles[1], na.rm = TRUE)  & rv < quantile(rv, quantiles[2], na.rm = TRUE))
pca <- prcomp(na.omit(t(my_data[selection, ])), scale. = TRUE)
percentVar <- round(pca$sdev^2/sum(pca$sdev^2)*100,1)[1:10]
plot(pca$x[, xcomp], pca$x[, ycomp]*-1,
col = pca_colors[conditions],
pch=16, cex = point_size,
xlab = paste("PC",xcomp," (", percentVar[xcomp], "%)", sep=""),
ylab = paste("PC",ycomp," (", percentVar[ycomp], "%)", sep=""),
xlim= my_xlimits, ylim=my_ylimits)
my_data[1,] <- NA
my_data[c(1,40,32),c(3,5,6)] <- NA
rv <- rowVars(my_data, na.rm = TRUE)
rv
selection <- (rv >  quantile(rv, quantiles[1], na.rm = TRUE)  & rv < quantile(rv, quantiles[2], na.rm = TRUE))
head(selection)
sum(is.na(selection))
na.omit(t(my_data[selection, ]))[1:5,1:5]
head(my_data[selection, ])
dim(my_data[selection, ])
dim(my_data)
head(selection)
sum(selection)
sum(selection, na.rm=T)
quantiles[1]
NA > 0
sum(is.na(selection))
head(rv)
sum(is.na(rv))
head(my_data[selection, ])
head(na.omit(my_data[selection, ]))
dim(na.omit(my_data[selection, ]))
sum(is.na(my_data[selection, ]))
my_data[!complete.cases(my_data),]
na.omit(my_data[!complete.cases(my_data),])
library(HelpersforDESeq2)
library(roxygen2)
roxygenise()
library(HelpersforDESeq2)
